AWSTemplateFormatVersion: 2010-09-09
Description: AWS DMS to Amazon MSK pipeline infrastructure.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: VPC Network Configuration
        Parameters:
          - VpcCidrBlock
          - Subnet1CidrBlock
          - Subnet2CidrBlock
      - Label:
          default: DB Instance Parameters
        Parameters:
          - DBInstanceClass
          - MasterUsername
          - MasterUserPassword
      - Label:
          default: DMS Parameters
        Parameters:
          - ReplicationInstanceClass
      - Label:
          default: EC2 Instance Parameters
        Parameters:
          - EC2InstanceType
          - KeyName
          - IPCidrToAllowTraffic
    ParameterLabels:
      DBInstanceClass:
        default: DB Instance Class
      EC2InstanceType:
        default: EC2 Instance Type
      KeyName:
        default: Key Name
      ReplicationInstanceClass:
        default: Replication Instance Class
      MasterUsername:
        default: Master Username
      MasterUserPassword:
        default: Master Password
      Subnet1CidrBlock:
        default: Subnet 1 CIDR Block
      Subnet2CidrBlock:
        default: Subnet 2 CIDR Block
      VpcCidrBlock:
        default: VPC CIDR Block

Mappings:
  RegionMap:
    us-east-1: # Virginia
      "EC2AMI" : "ami-045d48ee4dd4f5210"  # Updated Feb 03, 2020
    us-east-2: # Ohio
      "EC2AMI" : "ami-021e119b2b955586a" # Updated Feb 03, 2020
    us-west-2: # Oregon
      "EC2AMI" : "ami-04f6666670bad6990" # Updated Feb 03, 2020
    ap-south-1: # Mumbai
      "EC2AMI" : "ami-01ef7145a99919201" # Updated Feb 03, 2020
    ap-northeast-2: # Seoul
      "EC2AMI" : "ami-0f84e34359512e516" # Updated Feb 03, 2020
    ap-southeast-1: # Singapore
      "EC2AMI" : "ami-08c6f23674b803e33" # Updated Feb 03, 2020
    ap-southeast-2: # Sydney 
      "EC2AMI" : "ami-0327c19efba4c1cc7" # Updated Feb 03, 2020
    ap-northeast-1: # Tokyo
      "EC2AMI" : "ami-071fb5f94e15b8af8" # Updated Feb 03, 2020
    eu-central-1: # Frankfurt
      "EC2AMI" : "ami-009ce26e2fc8621cd" # Updated Feb 03, 2020
    eu-west-1: # Ireland
      "EC2AMI" : "ami-075c511465e103a00" # Updated Feb 03, 2020
    eu-west-2: # London
      "EC2AMI" : "ami-0738996a89d25ae41" # Updated Feb 03, 2020
    eu-west-3: # Paris - 
      "EC2AMI" : "ami-0a9211e0416c5d9e7" # Updated Feb 03, 2020
    eu-north-1: # Stockholm 
      "EC2AMI" : "ami-0974f8de192e11d12" # Updated Feb 03, 2020
    sa-east-1: # Sao Paulo 
      "EC2AMI" : "ami-0c6dc49bd206d2bcf" # Updated Feb 03, 2020

Parameters:
  VpcCidrBlock:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,3})'
    Default: 10.0.0.0/16
    Description: Input a IPv4 network range for a VPC in CIDR notation.
    Type: String
  Subnet1CidrBlock:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,3})'
    Default: 10.0.50.0/24
    Description: Input a IPv4 network range for a subnet 1 in CIDR notation.
    Type: String
  Subnet2CidrBlock:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,3})'
    Default: 10.0.200.0/24
    Description: Input a IPv4 network range for a subnet 2 in CIDR notation.
    Type: String
  #changed
  NodeType:
    Description: The type of Redshift node to be provisioned
    Type: String
    Default: dc2.large
    AllowedValues:
    - dc2.large
    - dc2.xlarge
    - dc2.8xlarge
    - ra3.4xlarge
    - ra3.16xlarge
  ReplicationInstanceClass:
    Description: Replication instance class.
    Type: String
    Default: dms.t2.medium
    AllowedValues:
      - dms.t2.micro
      - dms.t2.small
      - dms.t2.medium
      - dms.t2.large
      - dms.c4.large
      - dms.c4.xlarge
      - dms.c4.2xlarge
      - dms.c4.4xlarge
  EC2ServerInstanceType:
    Description: Amazon EC2 Instance Type
    Type: String
    Default: m5a.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  MasterUsername:
    Description: A name for the master user for both source and target database.
    Type: String
    Default: master
    AllowedPattern: '^[0-9a-zA-Z]+$'
  MasterUserPassword:
    Default: Password1
    Description: >-
      A password of the master user for both source and target database. A
      default password is 'Password1'.
    NoEcho: 'true'
    Type: String
  #changed
  EC2InstanceType:
    Description: An instance type for client EC2 instance
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
  IPCidrToAllowTraffic:
    Description: An IP address from where to allow ssh to client instance.
    Type: String
    Default: X.X.X.X/32
  #changed
  KeyName:
    Description: Input your key pair name for client EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
  #mightfail
  ImageId:
    Description: Image ID for client EC2 instance. Do not change this parameter.
    Type: String
    Default: 'ami-096fda3c22c1c990a'
    AllowedValues:
      - 'ami-096fda3c22c1c990a'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet1CidrBlock
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          
  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet2CidrBlock
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref IPCidrToAllowTraffic

  SGBaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  SubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      NetworkAclId: !Ref PublicNetworkAcl

  SubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      NetworkAclId: !Ref PublicNetworkAcl

  InboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0


  DMSVpcRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: dms-vpc-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'
      Path: /


  ClientEC2AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BlogClientEc2DMSReplicationTask
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dms:StartReplicationTask'
                  - 'dms:StopReplicationTask'
                Resource: ['*']
  RedshiftRole:
    Type: AWS::IAM::Role
    Properties :
      RoleName: RedshiftImmersionRole
      AssumeRolePolicyDocument:
        Version : 2012-10-17
        Statement :
          -
            Effect : Allow
            Principal :
              Service :
                - redshift.amazonaws.com
            Action :
              - sts:AssumeRole
      Path : /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    DependsOn:
      - VPCGatewayAttachment
      - DMSVpcRole
      - RedshiftRole
    Properties:
      ClusterType: 'single-node'
      NodeType:
        Ref: NodeType
      DBName: 'dev'
      MasterUsername:
        Ref: MasterUsername
      MasterUserPassword:
        Ref: MasterUserPassword
      ClusterParameterGroupName: default.redshift-1.0
      VpcSecurityGroupIds:
      - Ref: InstanceSecurityGroup
      ClusterSubnetGroupName:
        Ref: RedshiftClusterSubnetGroup
      PubliclyAccessible: 'false'
      Port: '5432'
      IamRoles:
        - Fn::GetAtt: [RedshiftRole, Arn]

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds:
      - Ref: Subnet1


  ReplicationSubnetGroup:
    Type: 'AWS::DMS::ReplicationSubnetGroup'
    Properties:
      #changed to sub
      # ReplicationSubnetGroupDescription: !Join
      #   - ''
      #   - - 'Created from the CloudFormation stask: '
      #     - !Ref 'AWS::StackName'
      #     - .
      ReplicationSubnetGroupDescription: !Sub 'Created from the CloudFormation stack: ${AWS::StackName}'
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  ReplicationInstance:
    Type: 'AWS::DMS::ReplicationInstance'
    Properties:
      AllocatedStorage: 200
      AllowMajorVersionUpgrade: 'true'
      AutoMinorVersionUpgrade: 'true'
      AvailabilityZone: !GetAtt
        - Subnet1
        - AvailabilityZone
      EngineVersion: 3.4.3
      PubliclyAccessible: 'false'
      ReplicationInstanceClass: !Ref ReplicationInstanceClass
      #mightfail https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dms-replicationinstance.html#cfn-dms-replicationinstance-replicationinstanceidentifier
      ReplicationInstanceIdentifier: !Ref 'AWS::StackName'
      ReplicationSubnetGroupIdentifier: !Ref ReplicationSubnetGroup
      VpcSecurityGroupIds:
        - !Ref InstanceSecurityGroup


  ClientEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ClientEC2AccessRole

  ClientEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet1
      IamInstanceProfile: !Ref ClientEc2InstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: 'true'
          VolumeSize: '200'
          VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install python3.8 -y
          sudo yum install java-1.8.0-openjdk-devel -y
          sudo yum erase awscli -y
          sudo yum install kernel-2.6.32-71.el6.x86_64 -y
          sudo yum install glibc-2.12-1.7.el6.x86_64 -y
          sudo yum install compat-glibc-2.5-46.2.x86_64 -y
          sudo yum install postgresql -y
          sudo yum install git maven -y
          sudo yum install openmotif-2.3.1-2.el5 -y 
          sudo yum install libXp-1.0.0-8.1.el5 -y 
          sudo yum install libXt-1.0.2-3.1.fc6 -y 
          sudo yum install libXtst-1.0.1-3.1 -y 
          sudo yum install libXi-1.6.1-1 -y
          sudo yum install libXmu-1.0.2-5 -y
          sudo yum install libXext-1.0.1-2.1 -y
          sudo yum install libSM-1.0.1-3.1 -y
          sudo yum install libICE-1.0.1-2.1 -y
          sudo yum install libX11-1.0.3-9.el5 -y
          cd /home/ec2-user
          echo "export PATH=.local/bin:$PATH" >> .bash_profile
          cd /home/ec2-user
          wget https://bootstrap.pypa.io/get-pip.py
          su -c "python3.8 get-pip.py --user" -s /bin/sh ec2-user
          su -c "/home/ec2-user/.local/bin/pip3 install boto3 --user" -s /bin/sh ec2-user
          su -c "/home/ec2-user/.local/bin/pip3 install awscli --user" -s /bin/sh ec2-user

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2ServerInstanceType
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - EC2Instance
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: 'true'
          Iops: '2000'
          VolumeSize: '250'
          VolumeType: io1
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: 0
        SubnetId: !Ref Subnet2
        GroupSet:
        - Ref: InstanceSecurityGroup

Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value: !Ref VPC
  Subnet1:
    Description: SubnetId of the public subnet
    Value: !Ref Subnet1
  Subnet2:
    Description: SubnetId of the public subnet
    Value: !Ref Subnet2
  InstanceSecurityGroup:
    Description: Security Group
    Value: !Ref InstanceSecurityGroup
